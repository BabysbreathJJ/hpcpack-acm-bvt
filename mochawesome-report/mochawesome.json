{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2018-06-03T12:42:33.828Z",
    "end": "2018-06-03T12:45:34.619Z",
    "duration": 180791,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "86d67dd4-fc1b-47f2-9643-5f6790b3efa5",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d4fcbfdb-c7e2-4a6c-ba08-4814ddd3a50e",
        "title": "Diag",
        "fullFile": "/Users/Lijingjing/dev/hpc-rest-bvt/test/diags.js",
        "file": "/test/diags.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Diag \"before all\" hook",
            "timedOut": false,
            "duration": 293,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.get('/nodes')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n        res.body.forEach(element => {\n            nodes.push(element.id);\n        });\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "16125af1-594c-46d0-ac6c-724190f5915e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have nodes data",
            "fullTitle": "Diag should have nodes data",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isNotEmpty(nodes);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "c906dcf5-38ff-4f49-b778-70e51c87341d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return diag tests list",
            "fullTitle": "Diag should return diag tests list",
            "timedOut": false,
            "duration": 167,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "diagApi.get('/tests')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n        assert.isArray(res.body);\n        if (res.body.length > 0) {\n            test = res.body[0];\n        }\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fd2197fb-8f29-4bfe-a217-598a7404a85f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should create a new diag test",
            "fullTitle": "Diag should create a new diag test",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (nodes.length > 4) {\n    nodes = nodes.slice(0, 4);\n}\ndiagApi.post('')\n    .set('Accept', 'application/json')\n    .send({\n        name: 'diag-BVT-test',\n        targetNodes: nodes,\n        jobType: 'diagnostics',\n        diagnosticTest: test\n    })\n    .expect(201)\n    .end((err, res) => {\n        expect(res.headers.location).to.include('/v1/diagnostics/');\n        let locationData = res.headers.location.split('/');\n        jobId = locationData[locationData.length - 1];\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cff24b01-091a-4d03-9520-289a325a7f93",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should finish a diag test of 4 nodes in 3 minutes",
            "fullTitle": "Diag should finish a diag test of 4 nodes in 3 minutes",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "setTimeout(function () {\n    diagApi.get('/' + jobId)\n        .set('Accept', 'application/json')\n        .end((err, res) => {\n            expect(res.body.state).equal('Finished');\n            done();\n        });\n}, 180000)",
            "err": {
              "message": "AssertionError: expected 'Failed' to equal 'Finished'",
              "estack": "AssertionError: expected 'Failed' to equal 'Finished'\n    at Test.diagApi.get.set.end (test/diags.js:70:44)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at assert (node_modules/supertest/lib/test.js:131:12)\n    at /Users/Lijingjing/dev/hpc-rest-bvt/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:706:12)\n    at parser (node_modules/superagent/lib/node/index.js:906:18)\n    at IncomingMessage.res.on.e (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)",
              "diff": "- Failed\n+ Finished\n"
            },
            "isRoot": false,
            "uuid": "1bb7e716-fc18-4afc-be8d-ba7c23d3d445",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c906dcf5-38ff-4f49-b778-70e51c87341d",
          "fd2197fb-8f29-4bfe-a217-598a7404a85f",
          "cff24b01-091a-4d03-9520-289a325a7f93"
        ],
        "failures": [
          "1bb7e716-fc18-4afc-be8d-ba7c23d3d445"
        ],
        "pending": [],
        "skipped": [],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}