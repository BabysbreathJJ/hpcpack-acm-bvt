{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-04T08:04:14.202Z",
    "end": "2018-06-04T08:05:45.462Z",
    "duration": 91260,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "db72c7ce-5fbf-4100-82bb-30a9fae8575c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "357ad4cc-b932-4446-9d23-b00998445507",
        "title": "Diag",
        "fullFile": "D:\\api-testing\\test\\diags.js",
        "file": "\\test\\diags.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Diag \"before all\" hook",
            "timedOut": false,
            "duration": 408,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.get('/nodes')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n        res.body.forEach(e => {\n            if (e.health == 'OK') {\n                nodes.push(e.id);\n            }\n        });\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "75f34f9f-f8e2-47c5-ba28-8a9824cf48cf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have nodes data",
            "fullTitle": "Diag should have nodes data",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isNotEmpty(nodes);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "11c4ee4b-d367-443e-b7f1-4d00d9578b48",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return diag tests list",
            "fullTitle": "Diag should return diag tests list",
            "timedOut": false,
            "duration": 234,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "diagApi.get('/tests')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n        assert.isArray(res.body);\n        if (res.body.length > 0) {\n            pingpong = res.body.find((e) => {\n                return e.name == 'pingpong';\n            });\n            pingpong.arguments = \"[]\";\n            ring = res.body.find((e) => {\n                return e.name == 'ring';\n            });\n            ring.arguments = \"[]\";\n        }\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "882ae3ac-9e23-4083-b155-e6892b2308a1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should create a new pingpong diag test",
            "fullTitle": "Diag should create a new pingpong diag test",
            "timedOut": false,
            "duration": 272,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (nodes.length > 4) {\n    nodes = nodes.slice(0, 4);\n}\ndiagApi.post('')\n    .set('Accept', 'application/json')\n    .send({\n        name: 'diag-BVT-test',\n        targetNodes: nodes,\n        jobType: 'diagnostics',\n        diagnosticTest: pingpong\n    })\n    .expect(201)\n    .end((err, res) => {\n        expect(res.headers.location).to.include('/v1/diagnostics/');\n        let locationData = res.headers.location.split('/');\n        jobId = locationData[locationData.length - 1];\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f21b2883-4862-434e-9ace-073faac1d2b2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get a pinpong diag test result before timeout",
            "fullTitle": "Diag should get a pinpong diag test result before timeout",
            "timedOut": false,
            "duration": 90329,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let startTime = new Date();\ntimeout = nodes.length * 30000;\nconsole.log(timeout);\nlet loop = Loop.start(\n    diagBaseUrl + '/' + jobId,\n    {\n        next: (result) => {\n            result = JSON.parse(result);\n            console.log(result.state);\n            let endTime = new Date();\n            let elapseTime = endTime - startTime;\n            if (result.state == 'Finished') {\n                assert.ok(result.state === 'Finished', 'pingpong diag test finished in ' + elapseTime + ' ms.');\n                done();\n                return false;\n            }\n            else if (result.state == 'Failed') {\n                assert.ok(result.state === 'Failed', 'pingpong diag test faied in ' + elapseTime + ' ms.');\n                done();\n                return false;\n            }\n            if (elapseTime > timeout) {\n                assert.fail(\"actual runtime \" + elapseTime + ' ms', \"expected time \" + timeout + ' ms', \"The pingpong diag test doesn't finished in expected time, time elapses: \" + elapseTime + ' ms, the max time is ' + timeout + ' ms');\n                done();\n                return false;\n            }\n            return true;\n        }\n    },\n    10000\n);",
            "err": {},
            "isRoot": false,
            "uuid": "d0b12efe-ecfd-4fea-9a88-9bdef6c076f0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "11c4ee4b-d367-443e-b7f1-4d00d9578b48",
          "882ae3ac-9e23-4083-b155-e6892b2308a1",
          "f21b2883-4862-434e-9ace-073faac1d2b2",
          "d0b12efe-ecfd-4fea-9a88-9bdef6c076f0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 90836,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}