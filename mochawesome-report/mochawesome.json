{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-04T08:23:37.867Z",
    "end": "2018-06-04T08:25:29.097Z",
    "duration": 111230,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "1bb76d4e-fde4-4aa0-a1d1-ebff26b61414",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "68eaf3d5-2eab-4158-a041-af21567d4268",
        "title": "Diag",
        "fullFile": "D:\\api-testing\\test\\diags.js",
        "file": "\\test\\diags.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Diag \"before all\" hook",
            "timedOut": false,
            "duration": 396,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "api.get('/nodes')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n        res.body.forEach(e => {\n            if (e.health == 'OK') {\n                nodes.push(e.id);\n            }\n        });\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dd457712-6178-4b4e-b38a-e60d04f7b4b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should have nodes data",
            "fullTitle": "Diag should have nodes data",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isNotEmpty(nodes);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "da696f13-ed38-4e91-a075-ba8bcf5837ef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return diag tests list",
            "fullTitle": "Diag should return diag tests list",
            "timedOut": false,
            "duration": 233,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "diagApi.get('/tests')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n        assert.isArray(res.body);\n        if (res.body.length > 0) {\n            pingpong = res.body.find((e) => {\n                return e.name == 'pingpong';\n            });\n            pingpong.arguments = \"[]\";\n            ring = res.body.find((e) => {\n                return e.name == 'ring';\n            });\n            ring.arguments = \"[]\";\n        }\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0f2e438f-0748-4b46-827a-47eb200faa65",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should create a new pingpong diag test",
            "fullTitle": "Diag should create a new pingpong diag test",
            "timedOut": false,
            "duration": 339,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "if (nodes.length > 4) {\n    nodes = nodes.slice(0, 4);\n}\ndiagApi.post('')\n    .set('Accept', 'application/json')\n    .send({\n        name: 'diag-BVT-test',\n        targetNodes: nodes,\n        jobType: 'diagnostics',\n        diagnosticTest: pingpong\n    })\n    .expect(201)\n    .end((err, res) => {\n        expect(res.headers.location).to.include('/v1/diagnostics/');\n        let locationData = res.headers.location.split('/');\n        jobId = locationData[locationData.length - 1];\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1969b146-0a98-4645-891b-26d76cb73993",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get a pinpong diag test result before timeout",
            "fullTitle": "Diag should get a pinpong diag test result before timeout",
            "timedOut": false,
            "duration": 110243,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let startTime = new Date();\ntimeout = nodes.length * 30000;\nconsole.log(timeout);\nlet loop = Loop.start(\n    diagBaseUrl + '/' + jobId,\n    {\n        next: (result) => {\n            result = JSON.parse(result);\n            console.log(result.state);\n            let endTime = new Date();\n            let elapseTime = endTime - startTime;\n            if (result.state == 'Finished') {\n                assert.ok(result.state === 'Finished', 'pingpong diag test finished in ' + elapseTime + ' ms.');\n                done();\n                return false;\n            }\n            else if (result.state == 'Failed') {\n                assert.ok(result.state === 'Failed', 'pingpong diag test faied in ' + elapseTime + ' ms.');\n                done();\n                return false;\n            }\n            if (elapseTime > timeout) {\n                assert.fail(\"actual runtime \" + elapseTime + ' ms', \"expected time \" + timeout + ' ms', \"The pingpong diag test doesn't finished in expected time, time elapses: \" + elapseTime + ' ms, the max time is ' + timeout + ' ms');\n                done();\n                return false;\n            }\n            return true;\n        }\n    },\n    10000\n);",
            "err": {},
            "isRoot": false,
            "uuid": "259c304a-91f8-4ee1-b9b7-4e3b330eea64",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "da696f13-ed38-4e91-a075-ba8bcf5837ef",
          "0f2e438f-0748-4b46-827a-47eb200faa65",
          "1969b146-0a98-4645-891b-26d76cb73993",
          "259c304a-91f8-4ee1-b9b7-4e3b330eea64"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 110816,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}